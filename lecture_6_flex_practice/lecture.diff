diff --git a/cool.flex b/cool.flex
index 85e8ff0..fdf5868 100644
--- a/cool.flex
+++ b/cool.flex
@@ -11,6 +11,7 @@
 #include <cool-parse.h>
 #include <stringtab.h>
 #include <utilities.h>
+#include <assert.h>
 
 /* The compiler assumes these identifiers. */
 #define yylval cool_yylval
@@ -35,7 +36,9 @@ char string_buf[MAX_STR_CONST]; /* to assemble string constants */
 char *string_buf_ptr;
 
 extern int curr_lineno;
-extern int verbose_flag;
+//extern int verbose_flag;
+int nest_comm = 0;
+
 
 extern YYSTYPE cool_yylval;
 
@@ -48,11 +51,19 @@ extern YYSTYPE cool_yylval;
 %option yylineno
 %option noyywrap
 
+%x COMMENT
+
 /*
  * Define names for regular expressions here.
  */
 
 DARROW          =>
+TRUE		t[Rr][uU][eE]
+ELSE		[eE][lL][sS][eE]
+COMMENT_LONG_IN	 [\(][\*]
+COMMENT_LONG_OUT [\*][\)]
+
+
 
 %%
 
@@ -60,11 +71,34 @@ DARROW          =>
   *  Nested comments
   */
 
+{COMMENT_LONG_IN}	{ 
+	++nest_comm;
+	BEGIN(COMMENT);	
+	}
+<COMMENT>{COMMENT_LONG_IN} { ++nest_comm;}
+<COMMENT>{COMMENT_LONG_OUT} { 
+	--nest_comm;
+	assert(nest_comm >= 0);
+	if (nest_comm == 0)
+	{
+		BEGIN(INITIAL);
+	}
+	}
+<COMMENT>[\n] 	{++curr_lineno;}
+<COMMENT><<EOF>> { cool_yylval.error_msg="EOF in comment\n"; return (ERROR);}
+<COMMENT>.
+
 
  /*
   *  The multiple-character operators.
   */
 {DARROW}		{ return (DARROW); }
+{TRUE}		{ cool_yylval.boolean=true; return (BOOL_CONST); }
+{ELSE}		{ return (ELSE); }
+
+[a-zA-Z]+	{ cool_yylval.symbol=stringtable.add_string(yytext); return (TYPEID);}
+
+[\n]		{ ++curr_lineno; }
 
  /*
   * Keywords are case-insensitive except for the values true and false,
